{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"a-use-service":{
			"scope": "typescript",
			"prefix": "a-use-service",
			"body": [
				"$1List: $2[];",
				"$1Service: $2Service;",
				"$1ListSub: Subscription;",
				"  isLoading = false",
				"  constructor($1Service: $2Service) {",
					"this.$1Service = $1Service;",
				"  }",
				" ngOnDestroy(): void {",
				"    this.$1ListSub.unsubscribe();",
				"  }",
				"  ngOnInit(): void {",
				"    this.$1ListSub = this.$1Service.$1Changed.subscribe($1 =>{",
				"      this.$1List = $1",
				"      this.isLoading = false",
				"    })",
				"    this.isLoading = true",
				"    this.$1Service.init$2()",
				"  }",
			],
			"description": "Insert Service Usage into Code"
		},

		"a-fill-service": {
			"scope": "typescript",
			"prefix": "a-fill-service",
			"body": [
				"$1Changed = new Subject<$2[]>()",
				" $1List:$2[]",
				"",
				"init$2(){", 
				"      this.$1Changed.next(this.$1List)",
				"  }",
			],
			"description": "Log output to console"
		}

}
